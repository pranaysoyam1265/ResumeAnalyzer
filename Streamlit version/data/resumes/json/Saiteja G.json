{
    "id": "resume_d12d33b2-8538-48f8-bfe1-bdf3f90bd627",
    "metadata": {
        "filename": "Saiteja G.docx",
        "processed_date": "2025-09-24T08:45:52.234806+00:00"
    },
    "raw_text": "Saiteja\n+1(940)437-0150\nsaitejaatwork@gmail.com\n\nPROFESSIONAL SUMMARY:\nAround 8 years of experience in the requirement analysis, design, development, testing, implementation, and support using Object Oriented Methodologies and Java/J2EE technologies.\nActively involved in each phase of Software Development Life cycle (SDLC).\nExpertise in client scripting language and server scripting languages like HTML, CSS, JavaScript, Groovy, JQuery, Ajax, AngularJS, JSP, NodeJS, ExtJS, BackboneJS, ReactJS, JSON, Bootstrap.\nExtensive experience working in Spring framework, Struts framework, O/R Mapping Hibernate framework, Mybatis and web services.\nExperience using Spring MVC, Spring Boot, Spring Cloud, Spring DAO, Spring Data, Spring IOC, Spring Annotations, Spring AOP, Spring Transactions and Spring Security.\nExperience in developing applications using Micro Services architecture.\nExpert in Core Java with strong understanding of Swing, socket programming, Collections, Multithreading, Event handling, Exception handling and Generics.\nExpertise in developing reliable and scalable enterprise applications using Servlets, JSPs, Structs, JSTL, JDBC, AJAX, JSF, EJB and Web Services.\nStrong work experience in application integration and communicating using SOA, Web Services such as Simple Object Access Protocol(SOAP), Representational State Transfer (REST/ Restful), JAX-RPC, JAX-RS, JAX-WS, WSDL, UDDI, Apache CXF, JAXB, XSD, Axis 2.\nExcellent knowledge and experience in writing SQL queries, Stored Procedures, Triggers and views using various databases such as MS SQL Server, MySQL, IBM DB2, Oracle databases and NoSQL database systems like Mongo DB, Cassandra. \nExpertise in XML technologies such as XSL, XSLT, XML schemas, XPath, XForms, XSL-FO and parsers like SAX, DOM.\nExperienced in JMS and Kafka over messaging to exchange the information in more reliable and asynchronous way in enterprise Applications. Used Apache Active MQ and Apache Camel as JMS provider.\nExperience in Creating and configuring the continuous delivery pipelines for deploying Micro services and lambda functions using Jenkins CI server.    \nHands on experience in deploying application in Google App Engine.                      \nUtilized Java 1.8 features like Lambda expressions and Stream API for Bulk data operations on Collections which would increase the performance of the Application.\nManaged Amazon Web Services like EC2, S3 bucket, ELB, Auto-Scaling, SNS, SQS, AMI, IAM, Dynamo DB, Elastic search, Virtual Private Cloud (VPC) through AWS Console and API Integration.\nHands on experience with amazon web services (AWS) and amazon cloud technologies such as Amazon EC2 (virtual servers) and Amazon Cloud Watch (monitoring).\nSkilled in programming scripting languages like Java \nDeploy application updates to AWS and monitored the load balancing of different instances.\nDeployed the Applications into Docker container and made easily accessible at runtime using Pivotal Cloud Foundry and other cloud services like AWS, Netflix Eureka.\nExperience in developing logging and standard mechanism based on Log4j and SLF4j.\nExperience in working in agile practices like ATDD and TDD using Junit, and mocking libraries like Mockito, Jmock for Java applications and Karma JS, Jasmine, Mocha JS, cucumber JS and Selenium web driver for UI applications. \nWorked on implementing full life cycle of software development process (SDLC) in using version control tools like Git, Rational Clear Case, Tortoise SVN, CVS (Concurrent Version System).\nHands-on experience working with Continuous Integration (CI) build-automation tools such as Jenkins along with Build Plugins like Maven, Gradle and Apache Ant.\nExperienced in the formation and mentoring of project teams working on Agile methodologies to deliver business critical software applications using tools like Jira.\nSignificant experience in web development tools like NetBeans, Adobe Dreamweaver, Spring Tool Suite, Eclipse, intelliJ and RAD.\nHands on experience with Windows, UNIX and Linux Environments.\nHaving Experience on Shell Scripting and Deployment of Applications in Server.\nExperience in designing, developing, and deploying J2EE applications on IBM Web sphere, Web logic, Apache Tomcat, Glassfish, Redhat and JBOSS Servers.\nTECHNICAL SKILLS:\n\t\t\t\t\t\nPROFESSIONAL EXPERIENCE:\nClient: MasterCard \t\t\t\t\t\t\t\t\tFeb 2016 – Till Date\nLocation: St Louis, MO\nRole:  Full Stack Java Developer\nDescription: MasterCard Worldwide is an American multinational financial services corporation. Its principal business is to process payments between the banks of merchants and the card issuing banks or credit unions of the purchasers who use the MasterCard brand debit and credit cards to make purchases.\nResponsibilities:\nInvolved in the complete SDLC (software development life cycle) of the application from requirement analysis to testing. \nExtensively worked on Responsive Web Design (RWD) page development using HTML5, CSS3, JQuery, JavaScript, Backbone.js, Twitter Bootstrap, Ajax, Angular JS, JSON, JSF UI Components and JSP.\nDefined new validations through AngularJS for the form field validation implemented through HTML5.\nUsed NodeJS to run AngularJS on server with mock JSON data and completed the UI development independent of server.\n Implemented new features in Groovy programming language as a part of Jenkins continuous delivery. \nUsed Core Java concepts like Swing, socket programming, Collections, Multithreading, Event handling, Exception handling and Generics.\nUtilized Java 1.8 features like Lambda expressions and Stream API for Bulk data operations on Collections which would increase the performance of the Application.\nDeveloped the application using J2EE Design Patterns like Business Delegate, Factory, Singleton, Session Facade, Service Locator and DAO. \n Used Java8 features in developing the code like Lambda expressions, creating resource classes, fetching documents from database. \nIntegrated Scala Web Service with Relational DB using Slick\nUsed JAX-Web services to interact with other applications using SOAP and WSDL file.\nDeveloped RESTful API for assessment indicators module and token based authentication for RESTful services using Spring Security.\nInvolved in building database Model, APIs and Views utilizing Python, to build an interactive web based solution. \nUsed Jersey to implement Restful Web Service and used XML form to transfer the data. \nExposed SOAP webservices as API's using Apigee Edge by implementing API Proxies \n Deployed and Monitored Micro Services Using Pivotal Cloud Foundry, also Managed Domains and Routes with the Cloud Foundry.\nFollowed Agile Methodology in analyze, define, and document the application, which will support functional and business requirements. Coordinate these efforts with Functional Architects. \nWorked and involved in deployment of core platform technologies, techniques, and web app frameworks such as spring, JBOSS, Tomcat, JSON, XML, HTML5, and Web Services.\nUsed Spring MVC module to develop MVC Architecture. \nDeveloped the Controller to handle the requests and responses.\nUsed Core Java to develop Business Logic as Spring Beans. \nConfigured Spring Container to implement IOC/DI of the Spring Beans, and to manage the beans life circle.\nWorked on Apache Camel, RabbitMQ for sending messages over queue. \nDeployed the Application into Docker container and made easily accessible at runtime using Cloud Foundry and other cloud services like AWS, Netflix Eureka\nUsed Spring Security and OAuth2.0 for Authentication and Authorization of the application.\nImplemented Spring AOP for declarative transaction management.\nCreated Stored Procedures, functions and Packages in Oracle 10g using SQL and PL/SQL for the Audit Trail using Oracle 10g as backend. \nWrote Microservices to export/import data and task scheduling and Spring boot, Spring and Hibernate in the Micro services and Swagger API for Microservices. \nDeveloped API for using AWS Lambda to manage the servers and run the code in the AWS\nDesigned, Configured and deployed Amazon Web Services (AWS) for a multitude of applications utilizing the Amazon cloud formation.\nExperienced in setting up Amazon EC2 instances, virtual private cloud (VPCs), and security groups. Setting up databases in AWS using RDS, storage using S3 bucket and configuring instance backups to S3 bucket.\nDeveloped POJO objects and used Hibernate as the Object-Relational Mapping (ORM) tool to access the persistent data from SQL Server. \nManaged code versioning with GitHub and deployment to staging and production servers\nUsed Rest Controllers to replace the existing operations layer, which acts as bridge between business layer and the UI. \nWorked on Solr, Elastic Search, Kafka, Flume, MangoDB and Cassendra.\nUsed Jenkins as build management tool for continuous integration process.\nUsed Google App Engine cloud services to launch Linux and windows machines.\nDeveloped Unit Test Cases. Used Junit for unit testing, Selenium for the testing of the application.\nConfigured pom.xml to deploy the project using Maven.\nProvided Technical support for production environments resolving the issues, analyzing the defects, providing and implementing the solution defects. \nEnvironment: Java, Lambda, J2EE, HTML, CSS, JavaScript, JQuery, Apache Camel,  AJAX, AngularJS, Bootstrap, JSON, JSP, JNDI, Oracle, Apache Camel, RabbitMQ, Spring AOP, Hibernate, Springcloud, Google Cloud Platform Spring MVC, Spring JDBC, JDBC, Web-Services, SOA (Service-oriented) Architecture, AWS, Redis, REST, JAX-RS, Jersey, JUnit, JAX-B, WebSphere, JIRA, Maven, GIT, RAD, Jenkins, MongoDB, PostgreSQL, Cassendra, Agile Methodology.\nClient: BCBS\t\t\t\t\t\t\t\t\t\tDec 2014 – Jan 2016\nLocation: Chicago, IL\nRole: JAVA Full Stack Developer\nDescription:\n Blue Cross and Blue Shield is a leading insurance company owned by its policyholder. BCBS is the health insurance and health care provider company. “Find a plan” is a web based J2EE application, created to help individuals and families easily shop for, and buy health insurance. Well mark offers a variety of insurance plans, as well as tools to help you choose the plan that’s right for you.\nResponsibilities:\nInvolved in SDLC requirements gathering, analysis, design, development and testing of application developed using AGILE methodology.\nCreated user-friendly GUI interface using HTML5, CSS3, JavaScript, JQuery, AngularJS, Node.js, ExpressJS, Backbone.js, AJAX, XML and JSON. \nInvolved in designing the client-side module architecture based on new Angular Framework.\nUsed Core Java concepts like Swing, socket programming, Collections, Multithreading, Event handling, Exception handling and Generics.\nImplemented persistence framework using Hibernate& Handled Transaction Management using the provided data source.\nResponsible for designing Hibernate mapping files based on business logic and Object relationships.\nDeveloped restful web service APIs using Spring Framework such as Spring Core, Spring MVC, Spring \nAOP and Java Persistence API with a backend PostgreSQL and Cassendra database.\nInvolved in developing Web Services to send XML request and reading the response SOAP UI from Java platform.\nInstalled and configured various components of Hadoop ecosystem and maintained their integrity. \n Involved in extracting customer's Big data from various data sources into Hadoop HDFS. This included data from mainframes, databases and logs data from servers.\nConsumed Web Services to interact with other external interfaces to exchange the data in the form of XML and by using SOAP.\n Used Apigee as a API gateway for APIs transformation, multiple authentication mechanisms \n Migrating application functionality in sending emails from MySQL to NoSQL database implemented by Google Cloud platform which handles BIG Data. \nExtensively used Google Cloud resources like Compute Engine, IAM, Google Container Registry, Container Builder and Cloud Storage buckets. \nMigrating servers, databases, and applications from AWS On-premises to  Google cloud platform\nCreated Restful Web services using Jersey API (JAX-RS) while data exchange was carried out between application and services using JSON. \n Used Apache Camel to implement Java Message Service (JMS) API for sending and receiving email notifications to the employee about notifications to their portal. \nCreating and supporting of JMS, MQ connection factory, topics, queues, channel, listeners. \nImplemented microservices using Spring boot, spring based microservices, and enabled discovery using Netflix eureka server.\nUsed Java-PHP bridge code to integrate Java with PHP. \nUsed Maven Deployment Descriptor Setting up build environment by writing Maven build.xml, taking build configuration and deployment of the application on JBoss Application Server.\nUsed Spring MVC, Ajax and Dependency Injection for handling presentation and business logic.\nTo maintain loose coupling between layers published the business layer as services and injected the necessary dependent components using Spring IOC and published cross cutting concerns like Logging, User Interface exceptions, Transactions using Spring AOP.\nIntegrated Spring DAO for data access using Hibernate.\nUsed Apache Camel framework for connectivity to different APIs and transports.\nCreated data model and generated Hibernate mappings and domain objects using Hibernate tools.\nIntegrated spring and hibernate together and worked on developing backend components and services using Hibernate and spring.\nExtensively used HQL and SQL for querying databases. \nDeveloped Message Driven Bean for asynchronous sending Messages using JMS.\nUsed Rest methodology for the service layer interface and used JSON for the data transformation.\nDeveloped various AJAX and JSON calls for the communication between the server and the UI.\nDeveloped web services for produce and consumed the services by making Web Service Calls to remote services in different applications.\nUsed Spring JMS module for lookup for the queues and MDBs for the listeners \nEstablished Database Connectivity using Hibernate O/R mapping with Spring ORM for MySQL Server. \nDeveloped the Mapping Resource Files for the database entities.\nPackaged and deployed the application in IBM Web sphere.\nUsed IntelliJ as IDE to develop the application and followed the standard features for debugging and running.\nWritten LINUX shell scripts to identify user login information.\nPlayback and technical presentations to the clients on acquired knowledge.\nGenerating reports in PDF using iText Open source and excel file formats.\nUsed log4J for application logging and notification tracing mechanisms.\nAnalysis and Bug fixing of the production problems and defects along with enhancements\nUsed Rational Clear Case for the version control\nUsed Maven as the build tool.\nUsed J-Unit Testing and Ant Scripts.\nUsed JIRA for tracking the Project Stories in AGILE Methodology.\n\nEnvironment: Java, JDK, J2EE (EJBs, JSP/Servlet, JDBC), Mongo DB, XML, HTML, CSS, Java Script, JQuery, Ajax, AngularJS, NodeJS, JSON, JMS,  Struts, Spring, Apache Camel, MVC design patterns, Spring MVC, Hibernate, Agile, Ant, Maven, Netflix, Rational Clear Case, Web sphere Server, IBM Web Sphere, Apache Camel, SOAP UI, JNDI, Log4J, PostgreSQL,  MySQL Server, Google cloud platform, JIRA , RMI, IntelliJ,  IDE, LINUX. \nClient: US Cellular\t\t\t\t\t\t\t\t\tNov 2013 – Nov 2014\nLocation: Knoxville, TN\nRole: Java Developer\nDescription:\nUs Cellular is a leading company in providing the wireless services to the mobile platform. One message is the system that Us Cellular uses to send communications to its customers. One message is the Enterprise Wide application for all transactional customer communications. The application supports all Email, SMS, EMS, and MMS communications for various organizations in Us Cellular One message stores customer notification Preferences in the preference center where customer can configure various notification types. \nResponsibilities:\nDesigned and developed the REST based Micro Services using the Spring Boot.\nWriting end-to-end flow i.e. controllers classes, service classes, DAOs classes as per the Spring MVC design and writing business logics using core java API and data structures\nDesign, develop & deliver the REST APIs that are necessary to support new feature development and enhancements in an agile environment. \nUsed Core Java concepts like Swing, socket programming, Collections, Multithreading, Event handling, Exception handling and Generics.\nUsed Spring JMS related MDB to receive the messages from other team with IBMMQ for queuing\nDeveloped presentation layer code, using JSP, HTML, AJAX and JQuery\nDeveloped the Business layer using spring (IOC, AOP), DTO, and JTA\nDeveloped the Persistence layer DAO using HIBERNATE\nWorked with Open symphony workflows and delivered work flow module to the client. \nDeveloped the project using industry standard design patterns like Singleton, Business Delegate Factory Pattern for better maintenance of code and re-usability\nDeveloping application module coded on Spring Batch and Apache Camel. \nWritten Jenkins pipeline template script in Groovy programming language for the automation of build and deployment process.\nCreated groovy scripts to extract transaction volume information and email to management on daily basis. \nInvolved in debugging and tuning the PL/SQL  code, tuning queries, optimization for the Oracle database using Explain Plan, hints and also worked on Partition tables using Range method. \nDeveloped unit test cases using Junit framework for testing accuracy of code and logging with SLF4j + Log4j\nWorked with defect tracking system Clear Quest\nWorked with IDE as Spring STS and deployed into spring tomcat server, WebSphere 6 & used Maven as build tool\nResponsible for code sanity in integration stream used Clear Case as version control tool.\n\nEnvironment: Java, J2EE, HTML, CSS, AJAX, JQuery, MongoDB,  Apache Camel, symphony, JavaScript, JSP, Spring, Spring Batch, Spring web services ,  XML, UML, JUNIT, IBM WebSphere, Maven, Clear Case, SoapUI, Oracle 11g, Spring JMS, IBM MQ.\n\nClient: FedEx\t\t\t\t\t\t\t\t\tJan 2012 – July 2013\nLocation: Memphis, TN\nRole: Java/J2EE Developer\nDescription:\nFedEx Corporation provides customers and businesses worldwide with a broad portfolio of transportation, e-commerce, and business services. The company offers integrated business applications through operating companies competing collectively and managed collaboratively, under the respected FedEx brand.\nResponsibilities:\nInvolved in all phases of the Software development life cycle (SDLC).\nDesigned project related documents which includes Use case, Class and Sequence diagrams.\nInvolved in design, development, testing and implementation of the process systems, working on iterative life cycles business requirements, and creating Detail Design Document.\nUsing Agile methodologies to plan work for every iteration and used continuous integration tool to make the build passes before deploying the code to other environments.\nExtensive experience in developing PL/SQL Stored Procedures, Functions, Packages, Cursors, Collections (Nested tables and Varrays), Records, Object types and Database Triggers. \nCreated HTML Wireframes based in the Detailed System Specification document Developed the presentation layer of the application using MVC architecture of spring framework. \nCreated DAO classes to interact with DB2 database.\nUsed Spring ORM module to integrate with Hibernate.\nUsed Core Java concepts like Swing, socket programming, Collections, Multithreading, Event handling, Exception handling and Generics.\nUsed JMS API for sending and receiving the messages on the queue.\nUsed the spring validation and Tiles Framework in the presentation layer.\nDeveloped user interface using JSP, Spring Tag Libraries to simplify the complexities of the application.\nDeveloped user interface with Java Server Pages, Ajax support to speed up the application form filling.\nUsed Apache Axis as the Web Service framework for creating and consuming Web Service clients using SOAP and WSDL.\nUsed Rally for tracking purpose.\nDesigned various tables required for the project using DB2 database. Used JBOSS server for deploying the application.\nUsed Ant for build, create JAR, WAR, EAR files and deploy the EAR files automatically. \nUsed Junit to test the application classes.\nUsed Log4J to capture the logging information.\n\nEnvironment: Java, J2EE, JavaScript, JSP, AJAX, XML, Agile, Spring, Eclipse IDE, DB2, Rational Rose, Log4j, Junit, Ant, JBOSS, Rally, Apache Axis, Web Service, SOAP, WSDL.\n\nClient: InfoTech\t\t\t\t\t\t\t\t\t\tSep 2010 – Dec 2011\nLocation: Hyderabad, India\nRole: Java Developer\nDescription:\nThe objective of Item Management is to set-up, maintain, and share Item information in a flexible system that easily supports Unilever’s growth, increases speed to market and improves data accuracy, while reducing user workload. Guided Setup is one module of the project which functions as a wizard to complete the configuration and creation of various types of items like Single Items, Multiple Items and Assortment Items.\nResponsibilities: \nInvolved in the design and development of an entire Module – Guided Set Up. Developed user interface through JSP and Servlets. \nDeveloped Action classes and Action Forms using the struts framework. \nDeveloped Customs tags to display dynamic contents and to avoid large amounts of java code in JSP pages\nConnected to database through JDBC. \nExtensive experience working with XML (DOM and SAX).\nUsed SQL-server to store the items in the database.\nUsed Session beans for navigation of steps.\nUsed Entity beans for storing the database in to database. Developed Session Beans as the clients of Entity Beans to maintain the Client state.\nDeveloped Ant Scripts to build and deploy EAR files on to Tomcat Server. Analyzed the EJB performance in terms of scalability by various Loads, Stress tests using Bean- test tool.\nExtensively used Eclipse while writing code as IDE. Written complex SQL queries, stored procedures, functions and triggers in PL/SQL. \nDeveloped test cases and used Junit for Unit Testing. \nUsed CVS for version controlling.\n\nEnvironment: Java, J2EE, Servlets, XML (DOM and SAX), JSP, EJB, JavaScript, CSS, JDBC, Struts, Ant, Web Logic Application Server, WSAD, Eclipse IDE, SQL-Server, Apache Tomcat, Oracle, PL/SQL, CVS, PVCS, Junit, Windows.\n\n\nClient: SLK Software\t\t\t\t\t\t\t\t\tJun 2009 - Aug 2010\nLocation: Bangalore, India\nRole: Java Developer\nDescription:\nSLK Software Services is an offshore development company providing end-to-end solutions using its proven methodologies based on SEI CMM Level 4 Guidelines. SLK Billing Care is the Web-based front office application used by customer service representatives to create and maintain customer accounts, manage their services, and handle customer issues. SLK Billing care is designed as the front-end application to customer related activities supported by SLK charging and other billing products.\nResponsibilities:\nDeveloped web application using Struts 2.X, JSP, Servlets, Java beans that uses MVC design pattern\nCreated user-friendly GUI interface and Web pages using HTML, CSS and JSP\nWrote JavaScript for client side validation.\nUsed Eclipse as IDE tool for creating Servlets, JSP, and XML.\nWrote SQL for JDBC prepared statements to retrieve the data from database.\nMonitored the logs using Log4J and fixed the problem\nThe application was deployed on the Tomcat.\nInvolved in build and deploying the application using ANT  \nUsed CVS as version control system \nWorked on bug fixing and Production Support\n\nEnvironment: Java, JDBC, Struts, JavaScript, HTML, CSS, JSP, Servlets, Tomcat, Oracle, Eclipse IDE, CVS, ANT, Log4J.\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "extracted_skills": [
        "agile",
        "angular",
        "aws",
        "cassandra",
        "communication",
        "css",
        "docker",
        "ec2",
        "git",
        "google cloud",
        "hadoop",
        "html",
        "java",
        "javascript",
        "jenkins",
        "jira",
        "lambda",
        "mentoring",
        "mongodb",
        "mysql",
        "node.js",
        "oracle",
        "php",
        "postgresql",
        "python",
        "r",
        "rds",
        "redis",
        "s3",
        "scala",
        "sql"
    ]
}