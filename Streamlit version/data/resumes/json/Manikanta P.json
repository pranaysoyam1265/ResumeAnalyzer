{
    "id": "resume_4e3fadc9-b254-498c-a0e1-560a65b42c32",
    "metadata": {
        "filename": "Manikanta P.docx",
        "processed_date": "2025-09-24T08:45:43.538507+00:00"
    },
    "raw_text": "                                                                 Manikanta                                   \n                                                            \n    Email: manikanta.java3@gmail.com                                                                     Phone: 513-601-8654\n\nFull stack developer with over 8 years of IT experience including user interaction, requirement analysis, design, development, testing, configuration, client interaction, and support.\n\n Professional Summary:\nSkilled in Object Oriented Analysis and Design (OOAD) and extensively worked with open source technologies – Struts, Spring, Hibernate frameworks, Log4j, Junit.\nProficiency in various components in Spring – IOC, AOP, JDBC, OXM, RestTemplate, MVC. \nGood experience in implementing the design patterns like Singleton, Session Facade, Business Delegate, Service Locator, Front Controller and Data Access Objects (DAO), etc.\nProficiency in various web based technologies like HTML, DHTML, ReactJS, JavaScript, Ajax, Tiles.\nExperience in adding dynamic functionality to web pages using JavaScript, jQuery, NodeJS and AngularJS.\nExcellent experience in software development life cycle (SDLC).\nExperience on installing the Mongo DB in Windows environment with adding arbiter to replica sets as well with development.\nHands on experience with Apache Infinispan cache.\nExperience with and solid understanding of Micro Services and implemented client-server business applications using Micro Services.\nWell versed working with Relational Data Base Management Systems as Oracle 9i/10g, MS SQL server, DB2, MySQL, Mongo DB, NoSQL Cassandra and developed SQL scripts and PL/SQL (queries, functions, procedures and triggers, profiles and users) on oracle database.\nWorked extensively on various flavors of UNIX operating system like Linux.\nExperience working with IBM MQ (Message queue) and JMS for asynchronous mode of communications.\nExperience working with multiple Servers – IBM Web Sphere, Oracle WebLogic, JBoss, Apache Tomcat.\nGood Experience in using test driven JS tools like Jasmine.\nExcellent experience in developing Web Services with Python programming language.\nSkilled at building applications based on SOA architecture in IBM Integration Designer.\nStrong exposure to Web 2.0 client technologies using JSP, JSTL, XHTML, DOM, CSS, JavaScript and Ajax.\nExperience in working with the Collections framework and Multi-threading. \nExperience in Manual and Automated testing using Selenium.\nHaving experience with Cloud Computing environment like Amazon Web Services(AWS).\nPerformed Requirement elicitation by gathering functional and non-functional requirement.\nStrong application development in WebSphere Portal, JSR 168 Specification integrated with Spring Portlet and Hibernate.\nExperience in implementing RESTful and SOAP based Web Services using Top down Approach and Bottom up Approach.\nHands on experience in building and deploying tools like ANT and MAVEN as well as version control using GIT, SVN/Subversion, Rational Clear Case, CVS and VSS.\nWorking knowledge of XML related technologies – XML, XSL, XSDs, DTD, JAXP (SAX, DOM), JAXB.\nExperience using JMS Integration Framework which reduces complexity of JMS API using Spring Integration with MQ.\n\nTechnical Skills:\n\n\n\nProfessional Experience:\n\nCenterPoint Energy, TX\t\t\t\t\t\t    \t\tJan 2016 - Present\nJAVA DEVELOPER\n\nProject Summary: The project focus on making it easier to collect energy consumption data from utility companies that is required to analyze energy usage and to deploy a new Market Transaction Management solution on top of Customer Care and Billing which maintains the request and response messages for, Enrollment requests and generating the Monthly and Historical Usages.\n\nResponsibilities:\n\nParticipated in and contributed to team demos, peer reviews, team retrospectives, and daily standups for the development of the application.\nCreated technical design documents using class and sequence diagrams for feature processing flows and data insertion.\nDesigned and developed new code for features based on Standard SF Design Patterns, SOC design principles, Single Responsibility and Reusability Principles.\nUsed Java Message Service (JMS) for asynchronous exchange of information between systems.\nInvolved in implementing JUnit Test Cases.\nUsed AJAX for implementing part of the functionality for Customer Registration, View Customer information modules. \nDeveloped API for using AWS Lambda to manage the servers and run the code in the AWS\nApplication deployment, Migrating data and application to AWS Platform.\nDesigned dynamic client-side JavaScript, codes to build web forms and simulate process for web application, page navigation and form validation.\nIntegrating Oracle CC&B with various business critical systems such as Financial Ledgers System. \nDeveloped UPK simulations for CC&B Overview and Navigation courses.\nDevised and established high level architecture for the release feature processing and data insertion into the calculation and workpaper tables. \nExperience in using distributed database NoSql Cassandra to manage large amounts of structured data. \nUsed React JS for templating for faster compilation and developing reusable components.\nBuilt RESTful Web services using MVC architecture style. \nAssigned Roles and Policies to Users, Security Groups by using Identity and Access Management(IAM) and implemented Multi Factor Authentication(MFA) to provide additional security to account and its resources.\nCreated JMS consumer to process RESTful over JMS messages.\nConfigured AWS S3 versioning and lifecycle policies to and backup service requests and archive files.\nConfigured Elastic Load Balancers (ELB) with AWS EC2 Autoscaling groups. \nCreated monitors, alarms and notifications for AWS EC2 hosts using Cloud Watch.\nUsed second level cache to enhance performance and proper memory management.\nUsed pureQuery interface to access relational databases using pureQuery Runtime and Java annotations and by using Merge(upsert) Statements and sequence objects.\nUsed a Micro Service architecture, interacting through a combination of REST and MQ and leveraging AWS to build, test and deploy Identity Micro Services.\n Used EC2 as virtual servers to host GIT, Jenkins and configuration management tool like Chef\nMultithreading was used to perform various tasks simultaneously like scraping the data and formatting the data at the same time as huge amount of data was processed at the same time it was getting scraped. \nTuned and recorded performance of NoSql Cassandra clusters by altering the JVM parameters. \nQueried and analyzed data from NoSql Cassandra for quick searching, sorting and grouping.\nDeveloped new and existing calculation setup, edit and review UI modules using JSP and JQuery for analysts to manage new and existing calculations.\nConfigured Spark streaming to receive real time data from the Kafka and store the stream data to NoSql Cassandra using Spark, Java and Scala \nImplemented AngularJS and Node JS with Spring MVC as model component.\nConducted tests for applications developed in Angular JS using Jasmine and Protractor. \nInvolved in BDD (Behavior Driven Development) using JBehave and Jasmine Framework.\nMonitored the performance of DAO calls and host components calls using Jamon and corrected performance when required for faster processing of usage records.\nImplementing Selenium testing platform and using test scripts with Eclipse IDE.\nWorked to increase the quality of the source code to meet the GFS standards using tools and Frameworks like Pitest for checking mutations, CheckStyle for coding standards EMMA for class line and branch coverage, CodePro for Static code analysis and CSSLint and JSLint for CSS and JavaScript code quality.\nUsed Maven for building the application and implemented with Scala.\nInvolved in monitoring of Sonar dashboard for code metrics for every sprint cycle; fixed code based on dashboard statistics. \nUsed Maven for building the application as an enterprise artifact, using Maven commands to verify test cases and coding standards for the application before deploying the code.\n\nEnvironment: Java 6, Spring 4, Spring JDBC, Websphere 8.5, IBM RSA, Jquery, Jasmine, JBehave, Jenkins, Jamon, Maven, Pitest, Junit, RESTful, JSON, EMMA, JMS, Multithreading , Scala, Angular JS, Java cache, Node JS, CodePro, NoSql Cassandra, React JS, GIT, Micro Services, Sonar, Spring Boot, Apigee, Selenium, AWS, Checkstyle, Splunk, EasyMock\n\nMorgan Stanley, NY\t                                                                                                                      Nov 2014 – Jan2016\t JAVA DEVELOPER\n\nProject Summary: Worked with Human Resource Information Technology group on Workday Project. The project mainly involves designing, developing, and maintaining the HR data from Workday and then building the enterprise data warehouse used by different groups. The Java Process involved extracting the data from workday in the form of xml files and then load it into our database. It also involves migration of data from a legacy internal HR application to Workday. The final data is reported to users through Business Objects reports and some outgoing feeds.\n\nResponsibilities:\n\nDesigned XSDs and implement services in Eclipse IDE and IBM Integration Designer (IBM ID) based on the XSDs.\nImplemented all the services based in Spring Architecture Spring Core, Spring MVC, Spring OXM API.\nDeveloped simple and secure integrations using Workday Enterprise Interface Builder (EIB).\nExtensively used Spring Rest Template to provide RESTful web services to call the underlying application, used Hibernate as an ORM tool.\nGood work experience on Mongo DB and MySQL, Creating SQL statements &Sub queries.\nWrote Python scripts to parse XML documents and load the data in database. \nDesigned business flow diagrams and processes, which included processes in Staffing, job benefits, compensation grades and packages.\nImplemented BackboneJS and ReactJS to create a dynamically changing website. \nUsed PL/SQL coding for Exception Handling and Duplicate Data maintaining.\nUpgrade underlying search engine to Elastic search 1.6 enhancing performance and insights.\nConfigured Spring ORM that provides simplified templates for accessing databases through ORM technologies, such as Hibernate in our case to access the database.\nCleansing data generated from weblogs with automated scripts in Python.\nImplemented client application specific code modules and used Ant Build Tool to build, compile,\n and create jar files of each client application.\nResponsible for constant upgrading of services as per release changes and unit testing by utilizing Junit 4 API, and used SOAP UI for testing in various environments and used JMockit to mock SEAS calls for testing.\nImplemented all the SEBS Services in IBM Integration Designer (IBM ID) by creating Mediation Flow Modules, Inbound Import and Outbound Export for all those services deployed in various environments, created toolkits for consumption by IBM Process Designer (IBM PD).  Implemented test cases for these operations in IBM ID.\nWorked with No SQL database to store JSON like dynamic connections data.\nCreated various Parser programs to extract data from Workday using Scala.\nUsed Apache Tiles Framework for User Interface look and feel.\nUsed SVN to check-in and check-out and co-ordinate among team members for Version Controlling.\nUsed Spring JMS template for the asynchronous exchange of critical business data and events among J2EE components and legacy system.\nWorked on version control tool GIT for branching, merging and reverting the code. \nUsed Clover to constantly check the effectiveness and coverage of the test cases.\nTested required operation of ID by creating human services to test from IBM Process Designer.\nResponsible for constantly revising and reviewing the code using Fish Eye-Crucible.\nResponsible for biweekly on call primary support and secondary support, coordinating and validating Change Requests and Work Requests. Created CR’s and WR’s on a regular basis for code deployment and code changes.\n\nEnvironment:  JDK 6, J2EE, Spring 3.1.2, Hibernate 3, Oracle WebLogic 10.3.6, Eclipse, Scala, XML, JSON, Log4j, JUnit, Anthill Pro, Ant, Jmockit, PL/SQL, GIT, Elastic search, Infinispan cache, Python, Oracle SQL Developer, Apache Tiles, Mongo DB, JMS, ReactJS, IBM Integration Designer, IBM Process Designer, SOAP UI, No SQL, Clover, Crucible\n\nAXA Equitable Life Insurance Company, NJ                                                                              Oct 2013 - Oct 2014\nJAVA DEVELOPER\n\nProject Summary: Employer Sponsored alerts \n Micro services designed to expose the data in Inforce alerts database and consume them from front end designed using Angular JS. Implementation of micro services using SpringBoot and eclipseLink data jpa (dynamic entity). \n\nResponsibilities\n\n        • Data analysis and breakdown the project into multiple micro services.         \n         • Designing dynamic entities and implementing service in spring boot.\n• Worked with Apache Wicket 1.6 for the presentation layer.\n• Performing analysis and developing POC on different ways to expose the micro services (Like     \n   Node JS Vs Spring Boot and Spring data JPA). \n•Writing SQL Statements to extract Data, to verify the output Data by using SQL Query analyzer.\n• Developed HTML5 Mobile application with HTML5, Java Script, JQuery, JSON and RESTful web service.\n• Worked on migrating the old java stack to Type safe stack using Scala for backend programming.\n         • Created various Parser programs to extract data from database using Scala. \n       • Mapped tables in database using Hibernate and Scala.\n• Used NodeJS as a lightweight webserver and to resolve javascript dependencies.\n• Involved in development of the User Interface presentation screens using HTML5, CSS3, Node JS.\n• Developing front end single page application using groovy JS.\n\nEnvironment: Spring Boot, Spring Data JPA, My SQL, HTML5, CSS3, Node JS, Scala 1.7, Spring Tool suite (STS 3.2), Hibernate, Apache Wicket 1.6, Angular 1.4, Oracle 10g\n\nThomson Reuters, MN\t\t\t\t\t                                             Aug 2012- Sep 2013\nJAVA DEVELOPER\n\nProject Summary: TRAMS (Thomson Reuters Application Management Suite) is a standardized suite of capabilities that manage TR’s application needs for deploying, logging, monitoring, and alerting on Java or Windows based applications and services. Worked on AutoScale cloud project which is a part of TRAMS to deploy, migrate, auto-provisioning and dynamic scaling of applications on TR’s private cloud by leveraging existing TRAMS infrastructure.\n\nResponsibilities:\n\nInvolved in Design and Development of AutoScale Project in TRAMS to deploy, migrate and managing cloud based applications.\nDeveloped the application on Spring Framework used Hibernate ORM to perform backend CMDB calls to retrieve and commit application specific configuration data required to deploy the application.\nExpose various Rest endpoints to be consumed as services to clients to directly autoscale the application, getting the status of the application and configure the application in conjunction with OpenStack API. \nIntegrated Splunk Rest API to query Splunk via Splunk jobs about call stack and other transaction information Developed custom parsers to parse splunk JSON output.\nDeveloped user interface using JSP, Angular, DOJO, and JQuery. Extensively used Angular directives, validations, Angular forms and Angular http service.\nWorked on application written in Groovy/Grails. Developed RESTful web service in groovy and services. \nWorked on TRAMS Deploy Engine (mona), Java and Windows Node Agent to develop new capabilities according to client requirements.\nDeveloped Test Suites for various Rest end points in JUnit4 Framework. Used SOAP UI for testing in various environments.\nParticipate in Iteration planning meeting biweekly and attended scrum meetings.\n\nEnvironment:  Java, Spring, Hibernate, Tomcat 7, XML, JSON, Log4j, JUnit, Angular, Groovy, Anthill Pro, Ant, Oracle SQL, REST, OpenStack API, Jackson, Splunk, JavaScript, Dojo Toolkit\n\nOptum Health, MN            \t\t\t                                                               Oct 2011 - Jun 2012\t\nJAVA DEVELOPER\n\nProject Summary:  OptumRx is a project in to manage customer prescription medications and other customer health products which manages customer’s order refills, tracking the order and displaying the status of the orders.\n\nResponsibilities:\nDeveloped and introduced new enhanced features in OptumRx customer portal in the customers’ medication cabinet section.\nIntegrated code with IBM Work Manger API to handle customer request and leveraged the framework to schedule background worker threads.\nEnhanced web-tier components using JSP, Spring, Apache Tiles 2.2, Tag Libraries and JavaScript.\nUsed Eclipse Rich Client Platform (RCP) for the development of the project.\nExtensively used Linux, Unix system administration tools to create servers and deploy and run applications in development stage.\nDeveloped Test Suites for various Rest end points in JUnit Framework, used EasyMock framework.\n\nEnvironment:  Java, Spring, Hibernate, WebSphere, Eclipse RCP, XML, JSON, Log4j, JQuery, Anthill Pro, Ant, Oracle SQL Developer, REST, JavaScript, JUnit, Unix, Linux, Apache Tiles 2.2, IBM RAD, Rally\n\nColruyt Group India, Hyderabad                                                                                              May 2009 - Sep 2011\nJAVA DEVELOPER\n\nProject Summary:\nThe project involves creation of a single, integrated system which executes the calculation of sales and compensation for both External and Internal producers and suppliers. \n\nResponsibilities: \n\nUsed Hibernate ORM mapping for Oracle database. \nFront-end is designed by using HTML, DHTML, JavaScript, CSS, JSP, JSF, JSTL and Struts. \nDeveloped various Spring MVC forms and performed both client side and server side validation\nWorked on Web services using SOAP and AXIS.\nUsed Hibernate as ORM tool for accessing database.\nUsed Rational Clear Case to access files and directories in the organization.\nIntegrated and configured Spring Framework and Hibernate environment.\nEnvironment: Java JDK 1.4, Eclipse 3.2, log4j, Ant, Solaris 10, Web Sphere Portal Server 6.1, RUP, Java 1.4, J2EE, JSP 1.2, Servlets 2.3, JSF 1.1, Prime Faces, Spring 1.2.6/2.0, Hibernate 2.0, Web Sphere 6.0, AXIS, Oracle 8i / 9g/10g, J Unit, XML, HTML, JQuery, Java Script, AJAX, CSS, Rational Clear Case\n",
    "extracted_skills": [
        "angular",
        "aws",
        "cassandra",
        "css",
        "data analysis",
        "ec2",
        "git",
        "html",
        "java",
        "javascript",
        "jenkins",
        "lambda",
        "mysql",
        "oracle",
        "python",
        "react",
        "rest api",
        "s3",
        "scala",
        "scrum",
        "spark",
        "sql"
    ]
}