{
    "id": "resume_9679fc6a-7771-4556-9f47-ec4a5af3cb9f",
    "metadata": {
        "filename": "Achyuth Resume_8.docx",
        "processed_date": "2025-09-24T08:45:37.877481+00:00"
    },
    "raw_text": "Achyuth\n540-999-8048\nachyuth.java88@gmail.com\n\nOBJECTIVE:\nAround 8 years of strong software experience in design, development, analysis and deployment of web-based and Client-Server business applications using Object Oriented Analysis and Design (OOAD, OOPS) and Java/JEE/J2EE technologies in Financial, Insurance, and Health Sector Domain with Software Development Life Cycle (SDLC).\n\nPROFESSIONAL SUMMARY:\nActively involved in each phase of Software Development Life cycle (SDLC).\nExpertise in client scripting language and server scripting languages like HTML5, CSS3, JavaScript, JQuery, Ajax, AngularJS, NodeJS, JSON, Bootstrap.\nUtilized Java 1.8 features like Lambda expressions and Stream API for Bulk data operations on Collections which would increase the performance of the Application\nHands on experience with Amazon web services (AWS) and Amazon cloud technologies such as Amazon EC2 (virtual servers) and Amazon Cloud Watch (monitoring).\nManaged Amazon Web Services like EC2, S3 bucket, ELB, Auto-Scaling, SNS, SQS, AMI, IAM, Dynamo DB, Elastic search, Virtual Private Cloud (VPC) through AWS Console and API Integration.\nExtensive experience working in Spring framework, Struts framework, ORM Mapping Hibernate framework and web services.\nExperience using Spring MVC, Spring Boot, Spring Cloud, Spring DAO, Spring Data, Spring IOC, Spring Annotations, Spring AOP, Spring Transactions and Spring Security.\nExperience in developing applications using Micro Services architecture.\nExpertise in developing reliable and scalable enterprise applications using Servlets, JSPs, Struts, JSTL, JDBC, AJAX, EJB and Web Services.\nStrong work experience in application integration and communicating using SOA, Web Services such as Simple Object Access Protocol(SOAP), Representational State Transfer (REST/ Restful), JAX-RPC, JAX-RS, JAX-WS, WSDL, UDDI, Apache CXF, JAXB, XSD, Axis2.\nExcellent knowledge and experience in writing SQL queries, Stored Procedures, Triggers and views using various databases such as MS SQL Server, MySQL, IBM DB2, Oracle databases and NoSQL database systems like Mongo DB.\nExpertise in XML technologies such as XSL, XSLT, XML schemas, XPath, XSL-FO and parsers like SAX, DOM.\nExperienced in JMS over messaging to exchange the information in more reliable and asynchronous way in enterprise Applications. Used Apache Active MQ and Apache Camel as JMS provider.\nExperience in Creating and configuring the continuous delivery pipelines for deploying Micro services and lambda functions using Jenkins CI server.                         \nExperience in developing logging and standard mechanism based on Log4j and SLF4j. \nWorked on implementing full life cycle of software development process (SDLC) in using version control tools like Git, Rational Clear Case, Tortoise SVN, CVS (Concurrent Version System).\nHands-on experience working with Continuous Integration (CI) build-automation tools such as Jenkins along with Build Plugins like Maven, Gradle and Apache Ant.\nExperienced in the formation and mentoring of project teams working on Agile methodologies to deliver business critical software applications using tools like Jira.\nExperience in web development tools like Eclipse, RAD, Spring Tool Suite, and IntelliJ.\nHands on experience with Windows, UNIX and Linux Environments.\nExperience in designing, developing, and deploying J2EE applications on IBM Web sphere, Web logic, Apache Tomcat, Glassfish and JBOSS Servers.\n\nTECHNICAL SKILLS\n\nPROFESSIONAL EXPERIENCE\nClient: Capital One\t\t\t\t\t\t\t\t\t\t            Mar 17 – Till date             \nLocation: Mclean, VA\nRole:  Full Stack Java Developer\n\nDescription: Capital One is the one of largest banking sector, it has over 480,000 members and is among the top 20 credit unions in the U.S.A. Capital One Home Loans servicing is a diversified bank that offers a variety of checking, savings, mortgage and lending accounts and services to individuals, small businesses and commercial clients.\n\nResponsibilities:\nInvolved in the complete SDLC (software development life cycle) of the application from requirement analysis to testing. \nFollowed Agile Methodology in analyze, define, and document the application, which will support functional and business requirements. Coordinate these efforts with Functional Architects. \nExtensively worked on Responsive Web Design (RWD) page development using HTML5, CSS3, JQuery, JavaScript, AngularJS, and JSON.\nUtilized Java 1.8 features like Lambda expressions and Stream API for Bulk data operations on Collections which would increase the performance of the Application.\nUsed Java 1.8 features in developing the code like Lambda expressions, creating resource classes, fetching documents from database. \nDeployed and Monitored Micro Services Using Pivotal Cloud Foundry, also Managed Domains and Routes with the Cloud Foundry.\nDesigned, Configured and deployed Amazon Web Services (AWS) for a multitude of applications utilizing the Amazon cloud formation.\nExperienced in setting up Amazon EC2 instances, virtual private cloud (VPCs), and security groups. Setting up databases in AWS using RDS, storage using S3 bucket and configuring instance backups to S3 bucket.\nImplemented the application using Spring IOC, Spring MVC Framework, Spring Batch, Spring Boot and handled the security using Spring Security.\nDeveloped RESTful API for assessment indicators module and token based authentication for RESTful services using Spring Security.\nInvolved in building database Model, APIs and Views utilizing Python, to build an interactive web based solution. \nUsed Jersey to implement Restful Web Service and used XML form to transfer the data. \nDeveloped the application using J2EE Design Patterns like Business Delegate, Factory, Singleton, Session Facade, Service Locator and DAO. \nWorked and involved in deployment of core platform technologies, techniques, and web app frameworks such as spring, JBOSS, Tomcat, JSON, XML, HTML5, and Web Services.\nUsed Spring MVC module to develop MVC Architecture. \nWorked on Apache Camel, RabbitMQ for sending messages over queue. \nDeployed the Application into Docker container and made easily accessible at runtime using Cloud Foundry and other cloud services like AWS, Netflix Eureka.\nUsed Spring Security and OAuth2.0 for Authentication and Authorization of the application.\nImplemented Spring AOP for declarative transaction management.\nDeveloped a AWS Lambda function to send a request for internal service end points through API Gateway using apache HTTP Client. \nManaged code versioning with GitHub and deployment to staging and production servers\nUsed Rest Controllers to replace the existing operations layer, which acts as bridge between business layer and the UI. \nUsed Jenkins as build management tool for continuous integration process.\nConfigured pom.xml to deploy the project using Maven.\nProvided Technical support for production environments resolving the issues, analyzing the defects, providing and implementing the solution defects. \n\nEnvironment: Agile Methodology, Java1.8, Lambda, J2EE, HTML5, CSS3, JavaScript, JQuery, AJAX, AngularJS, Bootstrap, JSON, JSP, AWS, Micro Services, Oracle, RabbitMQ, Spring AOP, Hibernate, Spring Cloud, Spring MVC, Spring JDBC, JDBC, Web-Services, SOA (Service-oriented) Architecture, Redis, REST, JAX-RS, Jersey, JUnit, JAX-B, WebSphere, JIRA, Maven, GIT, RAD, Jenkins, MongoDB,  Cassandra,.\n\nClient: State Farm\t\t\t\t\t\t\t\t\t\t                 Jan 16 – Feb 17 \nLocation: Dallas, TX\nRole: JAVA Full Stack Developer\n\nDescription: Auto Quote Purchase (AQP) application is one of the many applications that are part of SF Auto Systems. Property and Causality being the main forte of State Farm's business the maintenance of all the applications coming under the Auto Systems umbrella is crucial. Auto Quote Purchase (AQP) is one of the many applications that are part of SF Auto Systems. P&C Application support involves production support, defect fixes and minor enhancements based on the SF's requirement. AQP is a web application which is used to gather customer information, generate quote and provides options to purchase the Auto policies. \n\nResponsibilities:\nInvolved in SDLC requirements gathering, analysis, design, development and testing of application developed using AGILE methodology.\nCreated user-friendly GUI interface using HTML5, CSS3, JavaScript, JQuery, AngularJS.\nImplemented persistence framework using Hibernate& Handled Transaction Management using the provided data source.\nResponsible for designing Hibernate mapping files based on business logic and Object relationships.\nDeveloped restful web service APIs using Spring Framework such as Spring Core, Spring MVC, Spring \nAOP and Java Persistence API with a backend PostgreSQL and Cassandra database.\nInvolved in developing Web Services to send XML request and reading the response SOAP UI from Java platform.\nConsumed Web Services to interact with other external interfaces to exchange the data in the form of XML and by using SOAP.\nCreated Restful Web services using Jersey API (JAX-RS) while data exchange was carried out between application and services using JSON. \n Spring MVC, Ajax and Dependency Injection for handling presentation and business logic.\nTo maintain loose coupling between layers published the business layer as services and injected the necessary dependent components using Spring IOC and published cross cutting concerns like Logging, User Interface exceptions, Transactions using Spring AOP.\nIntegrated spring and hibernate together and worked on developing backend components and services using Hibernate and spring.\nExtensively used HQL and SQL for querying databases. \nDeveloped Message Driven Bean for asynchronous sending Messages using JMS.\nUsed Apache Camel Framework to transform, extract and load the data.\nUsed Spring Core Annotations for Dependency Injection and used Apache Camel to integrate spring framework. \nImplemented request and response objects using SOAP web services and created routes using Apache Camel. \nUsed Rest methodology for the service layer interface and used JSON for the data transformation.\nDeveloped various AJAX and JSON calls for the communication between the server and the UI.\nDeveloped web services for produce and consumed the services by making Web Service Calls to remote services in different applications.\nUsed Spring JMS module for lookup for the queues and MDBs for the listeners \nEstablished Database Connectivity using Hibernate O/R mapping with Spring ORM for MySQL Server. \nDeveloped the Mapping Resource Files for the database entities.\nPackaged and deployed the application in IBM Web sphere.\nUsed IntelliJ as IDE to develop the application and followed the standard features for debugging and running.\nUsed log4J for application logging and notification tracing mechanisms.\nAnalysis and Bug fixing of the production problems and defects along with enhancements\nUsed Rational Clear Case for the version control\nUsed Maven as the build tool.\nUsed J-Unit Testing and Ant Scripts.\nUsed JIRA for tracking the Project Stories in AGILE Methodology.\n\nEnvironment: Agile, Java, JDK, J2EE, HTML5, CSS3, Java Script, JQuery, Ajax, AngularJS, Mongo DB, XML, Spring, Apache Camel, MVC design patterns, Spring MVC, Hibernate, Ant, Maven, Netflix, Rational Clear Case, Web sphere Server, IBM Web Sphere, Apache Camel, SOAP UI, JNDI, Log4J, PostgreSQL, MySQL Server, Google cloud platform, JIRA, RMI, IntelliJ, IDE, LINUX. \nClient: Cigna Healthcare\t\t\t\t\t\t\t\t\t              Nov 13– Dec 15 Location: Windsor, CT\nRole: Java Developer\n\nDescription: One view is a web based application helping Customer Services people to view Benefit Plan information for Customers, health care providers. The application helps to resolve; track customer queries online by reducing overall time. The current project is reengineering the old application by replacing outdated Cordiant service layer with Restful Services and Spring Integration frame work improving performance and scalability.\n\nResponsibilities:\nDesigned and developed the REST based Micro Services using the Spring Boot.\nWriting end-to-end flow i.e. controllers classes, service classes, DAOs classes as per the Spring MVC design and writing business logics using core java API and data structures\nDesign, develop & deliver the REST APIs that are necessary to support new feature development and enhancements in an agile environment. \nUsed Spring JMS related MDB to receive the messages from other team with IBMMQ for queuing\nDeveloped presentation layer code, using JSP, HTML, AJAX and JQuery\nDeveloped the Business layer using spring (IOC, AOP), DTO, and JTA\nDeveloped the Persistence layer DAO using HIBERNATE\nWorked with Open symphony workflows and delivered work flow module to the client. \nDeveloped the project using industry standard design patterns like Singleton, Business Delegate Factory Pattern for better maintenance of code and re-usability\nDeveloping application module coded on Spring Batch and Apache Camel. \nWritten Jenkins pipeline template script in Groovy programming language for the automation of build and deployment process.\nCreated groovy scripts to extract transaction volume information and email to management on daily basis. \nDeveloped unit test cases using Junit framework for testing accuracy of code and logging with SLF4j + Log4j\nWorked with defect tracking system Clear Quest\nWorked with IDE as Spring STS and deployed into spring tomcat server, WebSphere 6 & used Maven as build tool\nResponsible for code sanity in integration stream used Clear Case as version control tool.\n\nEnvironment: Java, J2EE, HTML, CSS, AJAX, JQuery, MongoDB, Apache Camel, symphony, JavaScript, JSP, Spring, Spring Batch, Spring web services, XML, UML, JUNIT, IBM WebSphere, Maven, Clear Case, SoapUI, Oracle 11g, Spring JMS, IBM MQ.\n\nClient: Liberty Mutual\t\t                                                           \t\t\t                                 Jan 12 - July 13  \nLocation: Seattle, WA\nRole: Java Developer\n\nDescription: Liberty Mutual Insurance is an American diversified global insurer, and the second-largest property and casualty insurer in the United States. Ecommerce application provides services such as Auto Insurance and home insurance. The application is used for accessibility into the appropriate Agent Center applications and generating quotes and policies, payments and reports.\n\nResponsibilities:\nInvolved in all phases of the Software development life cycle (SDLC).\nDesigned project related documents which includes Use case, Class and Sequence diagrams.\nInvolved in design, development, testing and implementation of the process systems, working on iterative life cycles business requirements, and creating Detail Design Document.\nUsing Agile methodologies to plan work for every iteration and used continuous integration tool to make the build passes before deploying the code to other environments.\nExtensive experience in developing PL/SQL Stored Procedures, Functions, Packages, Cursors, Collections (Nested tables and arrays), Records, Object types and Database Triggers. \nCreated HTML Wireframes based in the Detailed System Specification Document Developed the presentation layer of the application using MVC architecture of spring framework. \nCreated DAO classes to interact with DB2 database.\nUsed Spring ORM module to integrate with Hibernate.\nUsed JMS API for sending and receiving the messages on the queue.\nUsed the spring validation and Tiles Framework in the presentation layer.\nDeveloped user interface using JSP, Spring Tag Libraries to simplify the complexities of the application.\nDeveloped user interface with Java Server Pages, Ajax support to speed up the application form filling.\nUsed Apache Axis as the Web Service framework for creating and consuming Web Service clients using SOAP and WSDL.\nUsed Rally for tracking purpose.\nDesigned various tables required for the project using DB2 database. Used JBOSS server for deploying the application.\nUsed Ant for build, create JAR, WAR, EAR files and deploy the EAR files automatically. \nUsed Junit to test the application classes.\nUsed Log4J to capture the logging information.\n\nEnvironment: Java, J2EE, JavaScript, JSP, AJAX, XML, Agile, Spring, Eclipse IDE, DB2, Rational Rose, Log4j, Junit, Ant, JBOSS, Rally, Apache Axis, Web Service, SOAP, WSDL.\n\nClient: Soft Pro Systems Ltd.                                                                                                                                             Sep 10 - Dec 11\nLocation: Hyderabad, India\t\t\t\t\t\t\t\nRole:  Java Developer  \n\nDescription: This project is mainly an Intranet application meant for employees in the organization. They are Intranet mailing System, Chatting, File Transfer and Remote Login. This project is based on the client server methodology.\n\nResponsibilities: \nInvolved in the design and development of an entire Module – Guided Set Up. Developed user interface through JSP and Servlets. \nDeveloped Action classes and Action Forms using the struts framework. \nDeveloped Customs tags to display dynamic contents and to avoid large amounts of java code in JSP pages\nConnected to database through JDBC. \nExtensive experience working with XML (DOM and SAX).\nUsed SQL-server to store the items in the database.\nUsed Session beans for navigation of steps.\nUsed Entity beans for storing the database in to database. Developed Session Beans as the clients of Entity Beans to maintain the Client state.\nDeveloped Ant Scripts to build and deploy EAR files on to Tomcat Server. Analyzed the EJB performance in terms of scalability by various Loads, Stress tests using Bean- test tool.\nExtensively used Eclipse while writing code as IDE. Written complex SQL queries, stored procedures, functions and triggers in PL/SQL. \nDeveloped test cases and used Junit for Unit Testing. \nUsed CVS for version controlling.\n\nEnvironment: Java, J2EE, Servlets, XML (DOM and SAX), JSP, EJB, JavaScript, CSS, JDBC, Struts, Ant, Web Logic Application Server, WSAD, Eclipse IDE, SQL-Server, Apache Tomcat, Oracle, PL/SQL, CVS, PVCS, Junit, Windows.\n\nClient: \tLogin IT Technologies\t\t\t                                                                                                      May 09 - Aug 10 Location: Hyderabad, India\nRole: Java Developer\n\nDescription:  PRS or Price reporting system is responsible to publish the rates to the customers and as to maintain the\nusers across the FedEx locations and its subsidiaries. It interacts with the customer fusion and existing legacy systems to\naccess the customer information and legacy data.\n\nResponsibilities:\nDeveloped web application using Struts 2.X, JSP, Servlets, Java beans that uses MVC design pattern\nCreated user-friendly GUI interface and Web pages using HTML, CSS and JSP\nWrote JavaScript for client-side validation.\nUsed Eclipse as IDE tool for creating Servlets, JSP, and XML.\nWrote SQL for JDBC prepared statements to retrieve the data from database.\nMonitored the logs using Log4J and fixed the problem\nThe application was deployed on the Tomcat.\nInvolved in build and deploying the application using ANT  \nUsed CVS as version control system \nWorked on bug fixing and Production Support\n\nEnvironment: Java, JDBC, Struts, JavaScript, HTML, CSS, JSP, Servlets, Tomcat, Oracle, Eclipse IDE, CVS, ANT, Log4J.\n",
    "extracted_skills": [
        "agile",
        "aws",
        "cassandra",
        "communication",
        "css",
        "docker",
        "ec2",
        "git",
        "google cloud",
        "html",
        "java",
        "javascript",
        "jenkins",
        "jira",
        "lambda",
        "mentoring",
        "mongodb",
        "mysql",
        "oracle",
        "postgresql",
        "python",
        "r",
        "rds",
        "redis",
        "s3",
        "sql"
    ]
}